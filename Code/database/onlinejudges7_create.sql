-- MySQL Script generated by MySQL Workbench
-- Tue Jan 19 00:14:22 2016
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema onlinejudges7
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema onlinejudges7
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `onlinejudges7` DEFAULT CHARACTER SET utf8 ;
USE `onlinejudges7` ;

-- -----------------------------------------------------
-- Table `codes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `codes` (
  `type` ENUM('roles','states','grades','locations','providers') NOT NULL,
  `id` TINYINT(3) UNSIGNED NOT NULL,
  `abbr` VARCHAR(3) NULL DEFAULT NULL,
  `name` VARCHAR(25) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`type`, `id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `terms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `terms` (
  `id` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(20) NOT NULL,
  `start` TIMESTAMP NULL DEFAULT NULL,
  `end` TIMESTAMP NULL DEFAULT NULL,
  `deadline` TIMESTAMP NULL DEFAULT NULL,
  `active` BIT(1) NOT NULL DEFAULT b'0',
  `allowjudgelogin` BIT(1) NOT NULL DEFAULT b'0',
  `showgrades` BIT(1) NOT NULL DEFAULT b'0',
  `studentsperjudge` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `location` VARCHAR(250) NULL DEFAULT NULL,
  `mapimageurl` VARCHAR(2083) NULL DEFAULT NULL,
  `srprojecturl` VARCHAR(2083) NULL DEFAULT NULL,
  `srprojecttoken` VARCHAR(20) NULL DEFAULT NULL,
  `noProfileImageUrl` VARCHAR(2083) NULL DEFAULT NULL,
  `liveurl` VARCHAR(2083) NULL DEFAULT NULL,
  `devurl` VARCHAR(2083) NULL DEFAULT NULL,
  `mailFrom` VARCHAR(300) NOT NULL DEFAULT 'Masoud Sadjadi <sadjadi@cs.fiu.edu>',
  `resetPasswordTemplate` SMALLINT(5) NOT NULL DEFAULT '3',
  `confirmTemplate` SMALLINT(5) NOT NULL DEFAULT '38',
  `rejectInviteTemplate` SMALLINT(5) NOT NULL DEFAULT '36',
  `removeInviteTemplate` SMALLINT(5) NOT NULL DEFAULT '37',
  `display` TINYINT(3) UNSIGNED NULL DEFAULT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id` (`id` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `projects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projects` (
  `id` SMALLINT(5) UNSIGNED NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `termId` SMALLINT(5) UNSIGNED NOT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id` (`id` ASC),
  INDEX `fk_projects_terms_idx` (`termId` ASC),
  CONSTRAINT `fk_projects_terms`
    FOREIGN KEY (`termId`)
    REFERENCES `terms` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 192
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `users` (
  `termId` SMALLINT(5) UNSIGNED NOT NULL DEFAULT '0',
  `id` INT(10) UNSIGNED NOT NULL,
  `role` TINYINT(3) UNSIGNED NOT NULL DEFAULT '2',
  `state` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1',
  `firstName` VARCHAR(100) NOT NULL,
  `lastName` VARCHAR(100) NOT NULL,
  `email` VARCHAR(255) NOT NULL DEFAULT NULL,
  `password` VARCHAR(255) NULL DEFAULT NULL,
  `oauth` VARCHAR(2083) NULL DEFAULT NULL,
  `title` VARCHAR(100) NULL DEFAULT NULL,
  `affiliation` VARCHAR(100) NULL DEFAULT NULL,
  `projectId` SMALLINT(5) UNSIGNED NULL DEFAULT '0',
  `location` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `token` VARCHAR(255) NULL DEFAULT NULL,
  `profileImgUrl` VARCHAR(2083) NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `unique_index` (`termId` ASC, `email` ASC),
  INDEX `fk_users_projects_idx` (`projectId` ASC),
  INDEX `fk_users_terms_idx` (`termId` ASC),
  INDEX `users_roles_state_idx` (`termId` ASC, `role` ASC, `state` ASC, `id` ASC),
  INDEX `email_idx` (`email` ASC),
  CONSTRAINT `fk_users_projects`
    FOREIGN KEY (`projectId`)
    REFERENCES `projects` (`id`)
    ON DELETE SET NULL
    ON UPDATE CASCADE,
  CONSTRAINT `fk_users_terms`
    FOREIGN KEY (`termId`)
    REFERENCES `terms` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `conflicts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conflicts` (
  `termId` SMALLINT(5) UNSIGNED NOT NULL,
  `judgeId` INT(10) UNSIGNED NOT NULL,
  `studentId` INT(10) UNSIGNED NOT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`termId`, `judgeId`, `studentId`),
  INDEX `fk_conflicts_judge_idx` (`judgeId` ASC),
  INDEX `fk_conflicts_student_idx` (`studentId` ASC),
  CONSTRAINT `fk_conflicts_judges`
    FOREIGN KEY (`judgeId`)
    REFERENCES `users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_conflicts_students`
    FOREIGN KEY (`studentId`)
    REFERENCES `users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_conflicts_terms`
    FOREIGN KEY (`termId`)
    REFERENCES `terms` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `templates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `templates` (
  `id` SMALLINT(5) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(50) NOT NULL,
  `subject` VARCHAR(100) NOT NULL,
  `body` TEXT NOT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id` (`id` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 36
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `emails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `emails` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `templateId` SMALLINT(5) UNSIGNED NOT NULL,
  `termId` SMALLINT(5) UNSIGNED NOT NULL,
  `userId` INT(10) UNSIGNED NOT NULL,
  `address` VARCHAR(255) NOT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id` (`id` ASC),
  INDEX `fk_emails_templates_idx` (`templateId` ASC),
  INDEX `fk_emails_terms_idx` (`termId` ASC),
  INDEX `fk_emails_users_idx` (`userId` ASC),
  CONSTRAINT `fk_emails_templates`
    FOREIGN KEY (`templateId`)
    REFERENCES `templates` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_emails_terms`
    FOREIGN KEY (`termId`)
    REFERENCES `terms` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_emails_users`
    FOREIGN KEY (`userId`)
    REFERENCES `users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 6045
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `questions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `questions` (
  `id` TINYINT(3) UNSIGNED NOT NULL AUTO_INCREMENT,
  `text` TEXT NOT NULL,
  `value` TINYINT(3) UNSIGNED NOT NULL,
  `display` SMALLINT(3) NULL DEFAULT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id` (`id` ASC),
  INDEX `enabled_idx` (`display` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 22
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `grades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `grades` (
  `termId` SMALLINT(5) UNSIGNED NOT NULL,
  `judgeId` INT(10) UNSIGNED NOT NULL,
  `studentId` INT(10) UNSIGNED NOT NULL,
  `questionId` TINYINT(3) UNSIGNED NOT NULL,
  `value` TINYINT(3) NULL DEFAULT NULL,
  `comment` TEXT NULL DEFAULT NULL,
  `state` TINYINT(3) UNSIGNED NOT NULL DEFAULT '0',
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`termId`, `judgeId`, `studentId`, `questionId`),
  INDEX `fk_grades_questions_idx` (`questionId` ASC),
  INDEX `fk_grades_judges_idx` (`judgeId` ASC),
  INDEX `fk_grades_students_idx` (`studentId` ASC),
  CONSTRAINT `fk_grades_judges`
    FOREIGN KEY (`judgeId`)
    REFERENCES `users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_grades_questions`
    FOREIGN KEY (`questionId`)
    REFERENCES `questions` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_grades_students`
    FOREIGN KEY (`studentId`)
    REFERENCES `users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_grades_terms`
    FOREIGN KEY (`termId`)
    REFERENCES `terms` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `placeholders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `placeholders` (
  `id` TINYINT(3) UNSIGNED NOT NULL AUTO_INCREMENT,
  `code` VARCHAR(20) NOT NULL,
  `text` VARCHAR(30) NOT NULL,
  `value` TEXT NULL DEFAULT NULL,
  `createdAt` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedAt` TIMESTAMP NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `code` (`code` ASC),
  UNIQUE INDEX `id` (`id` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 23
DEFAULT CHARACTER SET = utf8;

USE `onlinejudges7` ;

-- -----------------------------------------------------
-- procedure sp_assignStudents
-- -----------------------------------------------------

DELIMITER $$
USE `onlinejudges7`$$
CREATE PROCEDURE `sp_assignStudents`(IN _judgeId int, IN _conflicts text)
BEGIN
	DECLARE n, _termId, _studentsPerJudge int;

    SET n = (SELECT CHAR_LENGTH(_conflicts) - CHAR_LENGTH(REPLACE(_conflicts,',',''))) + 1;
    SET _termId = (SELECT id FROM terms WHERE active = 1 LIMIT 1);
    SET _studentsPerJudge = (SELECT studentsperjudge FROM terms WHERE active = 1 LIMIT 1);

    DELETE FROM conflicts WHERE termId = _termId AND judgeId = _judgeId;

    SET @stmt_sql = CONCAT("
		INSERT INTO conflicts (termId, judgeId, studentId)
        SELECT termId, judgeId, studentId
        FROM (
			SELECT DISTINCT ",_termId," as termId, ",_judgeId," as judgeId, TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX('",_conflicts,"', ',', seq), ',', -1)) as studentId FROM seq_1_to_",n,"
		) as q
        WHERE studentId > 0");
    PREPARE stmt FROM @stmt_sql;
	EXECUTE stmt;
    DEALLOCATE PREPARE stmt;

    DELETE FROM grades WHERE termId = _termId AND judgeId = _judgeId;

    INSERT INTO grades (termId, judgeId, studentId, questionId, value)
    SELECT _termId as termId, _judgeId as judgeId, s.id as studentId, q.id as questionId, q.value
    FROM questions as q
    INNER JOIN (
		SELECT id, COUNT(DISTINCT g.judgeId) as j, RAND() as r
		FROM users as u
		LEFT OUTER JOIN grades as g ON g.termId = u.termId and u.id = g.studentId
		WHERE u.role = 1 AND u.termId = _termId
			AND u.id NOT IN (SELECT studentId FROM conflicts WHERE judgeId = _judgeId)
            AND u.state <> 10
		GROUP BY id
        ORDER BY 2 ASC, 3 DESC
		LIMIT _studentsPerJudge
	) as s on q.display > 0;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_findUserAccount
-- -----------------------------------------------------

DELIMITER $$
USE `onlinejudges7`$$
CREATE PROCEDURE `sp_findUserAccount`(IN _emails text, IN _importAsJudges bool)
BEGIN
	DECLARE n, _termId, _nextId int;

    SET n = (SELECT CHAR_LENGTH(_emails) - CHAR_LENGTH(REPLACE(_emails,',',''))) + 1;
    SET _termId = (SELECT id FROM terms WHERE active = 1 LIMIT 1);
    SET _nextId = (SELECT MAX(id) FROM users WHERE role = 2);

    DROP TABLE IF EXISTS `_emailSplit`;
    CREATE TEMPORARY TABLE _emailSplit (
		`email` varchar(255) NOT NULL,
		PRIMARY KEY (`email`),
		UNIQUE KEY `email` (`email`)
	);

    -- split emails and remove duplicates
    SET @stmt_sql = CONCAT("INSERT IGNORE INTO _emailSplit SELECT SUBSTRING_INDEX(SUBSTRING_INDEX('",_emails,"', ',', seq), ',', -1) as email FROM seq_1_to_",n);
    PREPARE stmt FROM @stmt_sql; EXECUTE stmt; DEALLOCATE PREPARE stmt;

    DROP TABLE IF EXISTS `_judges`;
    CREATE TEMPORARY TABLE _judges (
		`email` varchar(255) NOT NULL,
        `id` int(10) unsigned NOT NULL DEFAULT '0',
        `termId` smallint(5) unsigned NOT NULL DEFAULT '0',
		`role` tinyint(3) unsigned NOT NULL DEFAULT '2',
		`state` tinyint(3) unsigned NOT NULL DEFAULT '1',
		`firstName` varchar(100) NOT NULL,
		`lastName` varchar(100) NOT NULL,
        `title` varchar(100) DEFAULT NULL,
		`affiliation` varchar(100) DEFAULT NULL,
		`password` varchar(60) DEFAULT NULL,
        `oauth` varchar(2083) DEFAULT NULL,
        `profileImgUrl` varchar(2083) DEFAULT NULL,

		PRIMARY KEY (`email`),
		UNIQUE KEY `email` (`email`)
	);

    INSERT IGNORE INTO _judges
    SELECT e.email, u.id, CASE WHEN u.termId = 0 THEN _termId ELSE u.termId END as termId, u.role, u.state,
		   u.firstName, u.lastName, u.title, u.affiliation, u.password, u.oauth, u.profileImgUrl
	FROM _emailSplit as e
	LEFT OUTER JOIN users as u ON e.email = u.email
    LEFT OUTER JOIN terms as t ON u.termId = t.id
	ORDER BY e.email ASC, t.active DESC, u.role DESC, u.state DESC, u.id DESC;

    IF _importAsJudges THEN
		SET @id = _nextId;

        INSERT INTO users (email, id, termId, role, state, firstName, lastName, title, affiliation, password, oauth, profileImgUrl)
		SELECT email, @id:=@id+1 as id, _termId as termId, 2 as role, 2 as state, firstName, lastName, title, affiliation, `password`, oauth, profileImgUrl
        FROM _judges
        WHERE termId <> _termId AND (role <> 2 OR state <> 12);

        TRUNCATE TABLE _judges;
        INSERT IGNORE INTO _judges
		SELECT e.email, u.id, CASE WHEN u.termId = 0 THEN _termId ELSE u.termId END as termId, u.role, u.state,
			   u.firstName, u.lastName, u.title, u.affiliation, u.password, u.oauth, u.profileImgUrl
		FROM _emailSplit as e
		LEFT OUTER JOIN users as u ON e.email = u.email
		LEFT OUTER JOIN terms as t ON u.termId = t.id
		ORDER BY e.email ASC, t.active DESC, u.role DESC, u.state DESC, u.id DESC;
	END IF;

    SELECT email, id, termId, role, state, firstName, lastName, title, affiliation, `password`, oauth, profileImgUrl FROM _judges;


    DROP TABLE _judges;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_getEmailContext
-- -----------------------------------------------------

DELIMITER $$
USE `onlinejudges7`$$
CREATE PROCEDURE `sp_getEmailContext`(IN _emailId int)
BEGIN
	DECLARE _termId int;
    DECLARE _questions, _projects, _students text;

    SET _termId = (SELECT termId FROM emails WHERE id = _emailId LIMIT 1);

    SET _projects = (SELECT GROUP_CONCAT(CONCAT('"', p.name, '"') order by p.name)
    FROM active_projects as p
    WHERE p.termId = _termId);

	SET _questions = (SELECT GROUP_CONCAT(CONCAT('"', q.text, '"') order by q.display)
    FROM questions as q
    WHERE q.display > 0);

    SET SESSION group_concat_max_len = 1000000;

    SELECT
	GROUP_CONCAT(
			CONCAT('{"id":',u.id,',"firstName":"',u.firstName,'","lastName":"',u.lastName,'","email":"',u.email,'","profileImgUrl":',COALESCE(CONCAT('"', u.profileImgUrl, '"'), CONCAT('"', t.noProfileImageUrl, '"'),'null'),',"state":"',s.name,'","location":"',l.name,'","project":"',p.name,'"}')
	ORDER BY u.firstName, u.lastName)
	INTO _students
    FROM users as u
		INNER JOIN terms as t on u.termId = t.id
		INNER JOIN codes as s on s.type = 'states' and s.id = u.state
		INNER JOIN codes as l on l.type = 'locations' and l.id = u.location
		INNER JOIN projects as p on p.id = u.projectId
    WHERE u.termId = _termId and u.role = 1 and u.state <> 10;

-- SELECT _students;

SELECT
	CONCAT(
'{
	"email":{
		"id":',e.id,',
        "address":"',e.address,'",
        "createdAt":"',DATE_FORMAT(e.createdAt, '%Y-%m-%dT%TZ'),'"
	},
    "template":{
		"subject":"',tmp.subject,'",
        "body":"',REPLACE(REPLACE(REPLACE(REPLACE(tmp.body,'"','\\"'), '\t','\\t'), '\n','\\n'), '\r', '\\r'),'"
	},
    "term":{
		"name":"',t.name,'",
        "start":',COALESCE(CONCAT('"',DATE_FORMAT(t.start, '%Y-%m-%dT%TZ'),'"'),'null'),',
        "end":',COALESCE(CONCAT('"',DATE_FORMAT(t.end, '%Y-%m-%dT%TZ'),'"'),'null'),',
        "deadline":',COALESCE(CONCAT('"',DATE_FORMAT(t.deadline, '%Y-%m-%dT%TZ'),'"'),'null'),',
        "studentsPerJudge":',t.studentsPerJudge,',
        "location":',COALESCE(CONCAT('"',t.location,'"'),'null'),',
        "mapImageurl":',COALESCE(CONCAT('"',t.mapImageUrl,'"'),'null'),',
        "liveUrl":',COALESCE(CONCAT('"',t.liveUrl,'"'),'null'),',
        "developmentUrl":',COALESCE(CONCAT('"',t.devUrl,'"'),'null'),'
	},
    "user": {
		"id":',u.id,',
        "firstName":"',u.firstName,'",
		"lastName":"',u.lastName,'",
        "email":"',u.email,'",
        "title":',COALESCE(CONCAT('"',u.title,'"'),'null'),',
        "affiliation":',COALESCE(CONCAT('"',u.affiliation,'"'),'null'),',
        "profileImgUrl":',COALESCE(CONCAT('"', u.profileImgUrl, '"'), CONCAT('"', t.noProfileImageUrl, '"'),'null'),',
        "role":"',r.name,'",
        "state":"',s.name,'",
        "location":',COALESCE(CONCAT('"',l.name,'"'),'null'),',
        "project":',COALESCE(CONCAT('"',p.name,'"'),'null'),'
	},
    "projects":[',_projects,'],
    "students":[',_students,'],
    "questions":[',_questions,']
}') as context
FROM emails as e
INNER JOIN templates as tmp on e.templateId = tmp.id
INNER JOIN terms as t on e.termId = t.id
INNER JOIN users as u on e.userId = u.id
INNER JOIN codes as r on r.type = 'roles' and r.id = u.role
INNER JOIN codes as s on s.type = 'states' and s.id = u.state
LEFT OUTER JOIN codes as l on l.type = 'locations' and l.id = u.location
LEFT OUTER JOIN projects as p on p.id = u.projectId
WHERE e.id = _emailId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_getPreviewContext
-- -----------------------------------------------------

DELIMITER $$
USE `onlinejudges7`$$
CREATE PROCEDURE `sp_getPreviewContext`(IN _userId int, IN _templateId int, IN _email VARCHAR(255))
BEGIN
	DECLARE _termId int;
    DECLARE _questions, _projects, _students text;

    SET _termId = (SELECT id FROM terms WHERE active = 1 LIMIT 1);

    SET _projects = (SELECT GROUP_CONCAT(CONCAT('"', p.name, '"') order by p.name)
    FROM active_projects as p
    WHERE p.termId = _termId);

	SET _questions = (SELECT GROUP_CONCAT(CONCAT('"', q.text, '"') order by q.display)
    FROM questions as q
    WHERE q.display > 0);

    SET SESSION group_concat_max_len = 1000000;

    SELECT
	GROUP_CONCAT(
			CONCAT('{"id":',u.id,',"firstName":"',u.firstName,'","lastName":"',u.lastName,'","email":"',u.email,'","profileImgUrl":',COALESCE(CONCAT('"', u.profileImgUrl, '"'), CONCAT('"', t.noProfileImageUrl, '"'),'null'),',"state":"',s.name,'","location":"',l.name,'","project":"',p.name,'"}')
	ORDER BY u.firstName, u.lastName)
	INTO _students
    FROM users as u
		INNER JOIN terms as t on u.termId = t.id
		INNER JOIN codes as s on s.type = 'states' and s.id = u.state
		INNER JOIN codes as l on l.type = 'locations' and l.id = u.location
		INNER JOIN projects as p on p.id = u.projectId
    WHERE u.termId = _termId and u.role = 1 and u.state <> 10;

-- SELECT _students;

SELECT
	CONCAT(
'{
	"email":{
		"id":0,
        "address":"',COALESCE(_email, u.email),'",
        "createdAt":"',DATE_FORMAT(CURRENT_TIMESTAMP, '%Y-%m-%dT%TZ'),'"
	},
    "template":{
		"subject":"',tmp.subject,'",
        "body":"',REPLACE(REPLACE(REPLACE(REPLACE(tmp.body,'"','\\"'), '\t','\\t'), '\n','\\n'), '\r', '\\r'),'"
	},
    "term":{
		"name":"',t.name,'",
        "start":',COALESCE(CONCAT('"',DATE_FORMAT(t.start, '%Y-%m-%dT%TZ'),'"'),'null'),',
        "end":',COALESCE(CONCAT('"',DATE_FORMAT(t.end, '%Y-%m-%dT%TZ'),'"'),'null'),',
        "deadline":',COALESCE(CONCAT('"',DATE_FORMAT(t.deadline, '%Y-%m-%dT%TZ'),'"'),'null'),',
        "studentsPerJudge":',t.studentsPerJudge,',
        "location":',COALESCE(CONCAT('"',t.location,'"'),'null'),',
        "mapImageurl":',COALESCE(CONCAT('"',t.mapImageUrl,'"'),'null'),',
        "liveUrl":',COALESCE(CONCAT('"',t.liveUrl,'"'),'null'),',
        "developmentUrl":',COALESCE(CONCAT('"',t.devUrl,'"'),'null'),'
	},
    "user": {
		"id":',u.id,',
        "firstName":"',u.firstName,'",
		"lastName":"',u.lastName,'",
        "email":"',u.email,'",
        "title":',COALESCE(CONCAT('"',u.title,'"'),'null'),',
        "affiliation":',COALESCE(CONCAT('"',u.affiliation,'"'),'null'),',
        "profileImgUrl":',COALESCE(CONCAT('"', u.profileImgUrl, '"'), CONCAT('"', t.noProfileImageUrl, '"'),'null'),',
        "role":"',r.name,'",
        "state":"',s.name,'",
        "location":',COALESCE(CONCAT('"',l.name,'"'),'null'),',
        "project":',COALESCE(CONCAT('"',p.name,'"'),'null'),'
	},
    "projects":[',_projects,'],
    "students":[',_students,'],
    "questions":[',_questions,']
}') as context
FROM templates as tmp
INNER JOIN terms as t on t.id = _termId
INNER JOIN users as u on u.id = _userId
INNER JOIN codes as r on r.type = 'roles' and r.id = u.role
INNER JOIN codes as s on s.type = 'states' and s.id = u.state
LEFT OUTER JOIN codes as l on l.type = 'locations' and l.id = u.location
LEFT OUTER JOIN projects as p on p.id = u.projectId
WHERE tmp.id = _templateId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_reAssignStudents
-- -----------------------------------------------------

DELIMITER $$
USE `onlinejudges7`$$
CREATE PROCEDURE `sp_reAssignStudents`(IN _judgeId int)
BEGIN
	DECLARE n, _termId, _studentsPerJudge int;

    SET _termId = (SELECT id FROM terms WHERE active = 1 LIMIT 1);
    SET _studentsPerJudge = (SELECT studentsperjudge FROM terms WHERE active = 1 LIMIT 1);

    DELETE FROM grades WHERE termId = _termId AND judgeId = _judgeId;

    INSERT INTO grades (termId, judgeId, studentId, questionId, value)
    SELECT _termId as termId, _judgeId as judgeId, s.id as studentId, q.id as questionId, q.value
    FROM questions as q
    INNER JOIN (
		SELECT id, COUNT(DISTINCT g.judgeId) as j, RAND() as r
		FROM users as u
		LEFT OUTER JOIN grades as g ON g.termId = u.termId and u.id = g.studentId
		WHERE u.role = 1 AND u.termId = _termId
			AND u.id NOT IN (SELECT studentId FROM conflicts WHERE judgeId = _judgeId)
            AND u.state <> 10
		GROUP BY id
        ORDER BY 2 ASC, 3 DESC
		LIMIT _studentsPerJudge
	) as s on q.display > 0;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_refillJudges
-- -----------------------------------------------------

DELIMITER $$
USE `onlinejudges7`$$
CREATE PROCEDURE `sp_refillJudges`()
BEGIN
	DECLARE _spj, _termId, _judgeId int;
    DECLARE done boolean DEFAULT FALSE;
    DECLARE judge CURSOR FOR SELECT id FROM _judges;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    SET _termId = (SELECT id FROM terms WHERE active = 1 LIMIT 1);
	SET _spj = (SELECT studentsperjudge FROM terms WHERE active = true LIMIT 1);

    DROP TABLE IF EXISTS `_judges`;
    CREATE TEMPORARY TABLE _judges (
		`id` int NOT NULL,
		PRIMARY KEY (`id`),
		UNIQUE KEY `id` (`id`)
	);

    INSERT IGNORE INTO _judges
    SELECT judgeId
	FROM student_by_judge
	GROUP BY judgeid
	HAVING COUNT(DISTINCT studentid) < _spj;

    OPEN judge;

    read_loop: LOOP
		FETCH judge INTO _judgeId;
		IF done THEN
			LEAVE read_loop;
		END IF;

        CALL sp_reAssignStudents(_judgeId);

    END LOOP;

    CLOSE judge;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `active_projects`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `active_projects` AS select `p`.`id` AS `id`,`p`.`name` AS `name`,`p`.`termId` AS `termId` from ((`projects` `p` join `users` `u` on(((`p`.`id` = `u`.`projectId`) and (`u`.`role` = 1) and (`u`.`state` <> 10)))) join `terms` `t` on(((`p`.`termId` = `t`.`id`) and (`u`.`termId` = `t`.`id`)))) group by `p`.`id`,`p`.`name`;

-- -----------------------------------------------------
-- View `contacts`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `contacts` AS select `u`.`id` AS `id`,`u`.`email` AS `email`,concat(`u`.`firstName`,' ',`u`.`lastName`) AS `fullName`,`u`.`termId` AS `termId`,`u`.`role` AS `role`,`u`.`state` AS `state` from `users` `u` where ((`u`.`state` <> 12) and (`u`.`role` <> 3));

-- -----------------------------------------------------
-- View `emails_lists`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `emails_lists` AS select `t`.`id` AS `id`,(case when (`t`.`id` = 0) then 'Terms' else `t`.`name` end) AS `name`,(case when (`t`.`id` = 0) then '1|ST|Students' else group_concat(distinct concat(`s`.`id`,'|',substr(`s`.`abbr`,2),'|',`s`.`name`) order by `s`.`id` ASC separator ',') end) AS `students`,(case when (`t`.`id` = 0) then '2|JG|Judges' else group_concat(distinct concat(`j`.`id`,'|',substr(`j`.`abbr`,2),'|',`j`.`name`) order by `j`.`id` ASC separator ',') end) AS `judges` from ((`terms` `t` join `codes` `s` on(((`s`.`type` = 'states') and (`s`.`abbr` like '1%')))) join `codes` `j` on(((`j`.`type` = 'states') and (`j`.`abbr` like '2%')))) where (`t`.`id` > 0) group by `t`.`id` order by `t`.`display`;

-- -----------------------------------------------------
-- View `emails_sent`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `emails_sent` AS select `e`.`id` AS `id`,`e`.`address` AS `address`,replace(replace(replace(`tp`.`subject`,'[[name]]',`t`.`name`),'[[fname]]',`u`.`firstName`),'[[lname]]',`u`.`lastName`) AS `subject`,(case when (`e`.`userId` = 0) then `e`.`address` else `u`.`firstName` end) AS `firstName`,(case when (`e`.`userId` = 0) then '' else `u`.`lastName` end) AS `lastName`,coalesce(concat(`u`.`firstName`,' ',`u`.`lastName`),`e`.`address`) AS `fullName`,coalesce(`u`.`profileImgUrl`,`t`.`noProfileImageUrl`) AS `profileImgUrl`,`e`.`createdAt` AS `sent`,(case when (`e`.`updatedAt` = `e`.`createdAt`) then NULL else `e`.`updatedAt` end) AS `replied`,`c`.`name` AS `state` from ((((`emails` `e` join `templates` `tp` on((`e`.`templateId` = `tp`.`id`))) join `terms` `t` on(((`e`.`termId` = `t`.`id`) and (`t`.`active` = 1)))) join `users` `u` on((`e`.`userId` = `u`.`id`))) join `codes` `c` on(((`c`.`id` = `u`.`state`) and (`c`.`type` = 'states'))));

-- -----------------------------------------------------
-- View `judges`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `judges` AS select `u`.`id` AS `id`,`s`.`name` AS `state`,substr(`s`.`abbr`,2) AS `abbr`,concat(`u`.`firstName`,' ',`u`.`lastName`) AS `fullName`,`u`.`email` AS `email`,`u`.`title` AS `title`,`u`.`affiliation` AS `affiliation`,coalesce(`u`.`profileImgUrl`,`t`.`noProfileImageUrl`) AS `profileImgUrl`,`u`.`password` AS `password`,`u`.`oauth` AS `oauth` from ((((`users` `u` join `terms` `t` on(((`u`.`termId` = `t`.`id`) and (`t`.`active` = 1)))) join `codes` `s` on(((`u`.`state` = `s`.`id`) and (`s`.`type` = 'states')))) join `codes` `l` on(((`u`.`location` = `l`.`id`) and (`l`.`type` = 'locations')))) join `projects` `p` on((`u`.`projectId` = `p`.`id`))) where (`u`.`role` = 2);

-- -----------------------------------------------------
-- View `stats_accepted`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `stats_accepted` AS select (case `g`.`state` when 0 then 'Pending' when 1 then 'Accepted' when 2 then 'Rejected' end) AS `state`,count(0) AS `total` from (`grades` `g` join `terms` `t` on(((`g`.`termId` = `t`.`id`) and (`t`.`active` = 1)))) group by `g`.`state`;

-- -----------------------------------------------------
-- View `stats_graded`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `stats_graded` AS select (case when ((`g`.`updatedAt` is not null) or (`g`.`comment` is not null)) then 'Graded' else 'Not Graded' end) AS `state`,count(0) AS `total` from (`grades` `g` join `terms` `t` on(((`g`.`termId` = `t`.`id`) and (`t`.`active` = 1)))) group by (case when ((`g`.`updatedAt` is not null) or (`g`.`comment` is not null)) then 'Graded' else 'Not Graded' end);

-- -----------------------------------------------------
-- View `stats_judges`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `stats_judges` AS select `s`.`name` AS `state`,count(`j`.`id`) AS `total` from (`codes` `s` join `judges` `j` on((substr(`s`.`abbr`,2) = `j`.`abbr`))) where ((`s`.`type` = 'states') and (`s`.`abbr` like '2%')) group by `s`.`id` order by `s`.`id`;

-- -----------------------------------------------------
-- View `stats_students`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `stats_students` AS select (case when isnull(`g`.`grade`) then 'Pending' else 'Graded' end) AS `state`,count(0) AS `total` from (`student_grades` `g` join `terms` `t` on(((`g`.`termId` = `t`.`id`) and (`t`.`active` = 1)))) group by (case when isnull(`g`.`grade`) then 'Pending' else 'Graded' end);

-- -----------------------------------------------------
-- View `student_by_judge`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `student_by_judge` AS select `g`.`judgeId` AS `judgeId`,`g`.`studentId` AS `studentId`,concat(`u`.`firstName`,' ',`u`.`lastName`) AS `fullName`,coalesce(`u`.`profileImgUrl`,`t`.`noProfileImageUrl`) AS `profileImgUrl`,`p`.`name` AS `project`,`l`.`name` AS `location`,count(`g`.`questionId`) AS `total`,sum((case when ((`g`.`state` = 1) or (`g`.`updatedAt` is not null) or (`g`.`comment` is not null)) then 1 else 0 end)) AS `graded`,sum((case when (`g`.`state` = 1) then 1 else 0 end)) AS `accepted` from ((((`grades` `g` join `users` `u` on(((`g`.`termId` = `u`.`termId`) and (`g`.`studentId` = `u`.`id`)))) join `projects` `p` on((`u`.`projectId` = `p`.`id`))) join `codes` `l` on(((`l`.`id` = `u`.`location`) and (`l`.`type` = 'locations')))) join `terms` `t` on(((`g`.`termId` = `t`.`id`) and (`t`.`active` = 1)))) group by `g`.`judgeId`,`g`.`studentId`;

-- -----------------------------------------------------
-- View `student_grade_by_question`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `student_grade_by_question` AS select `g`.`termId` AS `termId`,`g`.`studentId` AS `studentId`,`g`.`questionId` AS `questionId`,(sum((case when ((`q`.`display` > 0) and (`g`.`state` = 1)) then `g`.`value` else 0 end)) / sum((case when ((`q`.`display` > 0) and (`g`.`state` = 1)) then 1 else 0 end))) AS `grade` from (`grades` `g` join `questions` `q` on((`q`.`id` = `g`.`questionId`))) group by `g`.`termId`,`g`.`studentId`,`g`.`questionId`;

-- -----------------------------------------------------
-- View `student_grades`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `student_grades` AS select `qg`.`termId` AS `termId`,`qg`.`studentId` AS `studentId`,sum(`qg`.`grade`) AS `grade`,sum((case when (`q`.`display` > 0) then `q`.`value` else 0 end)) AS `max` from (`student_grade_by_question` `qg` join `questions` `q` on((`q`.`id` = `qg`.`questionId`))) group by `qg`.`termId`,`qg`.`studentId`;

-- -----------------------------------------------------
-- View `students`
-- -----------------------------------------------------
USE `onlinejudges7`;
CREATE  OR REPLACE VIEW `students` AS select `u`.`id` AS `id`,`s`.`name` AS `state`,substr(`s`.`abbr`,2) AS `abbr`,concat(`u`.`firstName`,' ',`u`.`lastName`) AS `fullName`,`u`.`email` AS `email`,coalesce(`u`.`profileImgUrl`,`t`.`noProfileImageUrl`) AS `profileImgUrl`,`p`.`name` AS `project`,`l`.`name` AS `location`,coalesce(`g`.`grade`,0) AS `grade`,coalesce(`g`.`max`,0) AS `max`,(case when (`t`.`showgrades` = 1) then concat(coalesce(`g`.`grade`,0),' / ',coalesce(`g`.`max`,0)) else 'Pending' end) AS `grade_display`,`u`.`password` AS `password`,`u`.`oauth` AS `oauth` from (((((`users` `u` join `terms` `t` on(((`u`.`termId` = `t`.`id`) and (`t`.`active` = 1)))) join `codes` `s` on(((`u`.`state` = `s`.`id`) and (`s`.`type` = 'states')))) join `codes` `l` on(((`u`.`location` = `l`.`id`) and (`l`.`type` = 'locations')))) join `projects` `p` on((`u`.`projectId` = `p`.`id`))) left join `student_grades` `g` on((`g`.`studentId` = `u`.`id`))) where (`u`.`role` = 1);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
